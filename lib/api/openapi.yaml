openapi: 3.0.2
paths:
  /product:
    summary: Manage products
    description: Manage products in the database
    get:
      summary: Get all products
      description: Get all products in the database
      operationId: get_all_products
      responses:
        default:
          description: Default error sample response
      tags:
        - product
    post:
      summary: Create product
      description: Create a new product in the database
      operationId: new_product
      requestBody:
        description: POST product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        default:
          description: Default error sample response
      tags:
        - product
  /product/{id}:
    summary: Manage product with id
    description: Perform CRUD operations on product matching id
    get:
      summary: Get product
      description: Get product matching id
      operationId: get_products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Example GET
          content:
            application/json:
              examples:
                Example:
                  value: |-
                    {
                        "id": 1,
                        "name": "Example Name",
                        "description": "Example description.",
                        "price": 19.99
                    }
        default:
          description: Default error sample response
      tags:
        - product
    patch:
      summary: Update product
      description: Update the product matching id
      operationId: update_product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - product
    delete:
      summary: Delete product
      description: Delete product matching id
      operationId: delete_product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - product
  /user:
    summary: Manage users
    description: Manage users in the database
    post:
      summary: Create user
      description: Create new user entry in the database
      operationId: new_user
      requestBody:
        description: CREATE user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        default:
          description: Default error sample response
      tags:
        - user
  /user/{id}:
    summary: Manage user
    description: Perform CRUD operations on user matching id
    get:
      summary: Get user
      description: Get user matching id
      operationId: get_user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: GET user
          content:
            application/json:
              examples:
                Example:
                  value: |-
                    {
                        "id": 1,
                        "email": "example@email.com"
                    }
        default:
          description: Default error sample response
      tags:
        - user
    patch:
      summary: Update user
      description: Update user matching id
      operationId: update_user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - user
    delete:
      summary: Delete user
      description: Delete user matching id
      operationId: delete_user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - user
  /cart/{user_id}:
    summary: Manage cart
    description: Perform CRUD operations on cart matching user_id
    get:
      summary: Get cart
      description: Get cart matching user_id
      operationId: get_cart
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: GET cart
          content:
            application/json:
              examples:
                Example:
                  value: |-
                    {
                        "id": 1,
                        "user_id": 1,
                        "items": [
                            {
                                "product_id": 54
                            },
                            {
                                "product_id": 27
                            },
                            {
                                "product_id": 3
                            }
                        ]
                    }
        default:
          description: Default error sample response
      tags:
        - cart
    patch:
      summary: Update cart
      description: Update cart matching id
      operationId: update_cart
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - cart
  /order:
    summary: Create order
    description: Create new order entry in the database
    post:
      summary: Create order
      description: Create new order entry in the database
      operationId: new_order
      responses:
        default:
          description: Default error sample response
      tags:
        - order
  /order/{id}:
    summary: Manage order
    description: Perform CRUD operations on order matching id
    get:
      summary: Get order
      description: Get order matching id
      operationId: get_order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          description: GET order
          content:
            application/json:
              examples:
                Example:
                  value: |-
                    {
                        "id": 1,
                        "user_id": 1,
                        "items": [
                            {
                                "name": "Example Name",
                                "price": 19.99,
                                "quantity": 1
                            },
                            {
                                "name": "Another Example",
                                "price": 27.49,
                                "quantity": 2
                            }
                        ]
                    }
        default:
          description: Default error sample response
      tags:
        - order
    patch:
      summary: Update order
      description: Update order matching id
      operationId: update_order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: CREATE order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        default:
          description: Default error sample response
      tags:
        - order
    delete:
      summary: Delete order
      description: Delete order matching id
      operationId: delete_order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - order
  /auth:
    summary: Auth
    description: Auth user
    post:
      summary: Auth
      description: Auth user
      operationId: auth
      responses:
        default:
          description: Default error sample response
      tags:
        - user
  /checkout/{user_id}:
    summary: Checkout path
    description: Endpoint used for confirming a purchase once payment has succeeded
    post:
      summary: Checkout
      description: Checkout the user's cart
      operationId: checkout
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: number
      responses:
        default:
          description: Default error sample response
      tags:
        - cart
components:
  schemas:
    product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
    user:
      type: object
      properties:
        email:
          type: string
    order:
      type: object
      properties:
        user_id:
          type: number
info:
  title: kapi
  version: 1.0.0
  description: An e-commerce REST API using Express, Node.js, and Postgres
